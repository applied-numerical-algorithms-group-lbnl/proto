#!/usr/bin/python
from argparse import *
import os
import glob
import platform
import subprocess

home=os.path.expanduser('~')

parser = ArgumentParser()
default_compiler='g++'
if platform.system()=='Darwin':
  default_compiler='clang++'
if platform.machine()=='ppc64le':
  default_compiler='xlC'

hdf5_lib_parallel = [
    '/usr/lib/x86_64-linux-gnu/hdf5/openmpi',
    os.path.expandvars('$ANAG_HDF5_DIR') + '/lib',
    os.path.expandvars('$HDF5_DIR') + '/lib',
    os.path.expandvars('$OLCF_HDF5_ROOT') + '/lib',
    home + '/hdf5_parallel/lib'
]
print(hdf5_lib_parallel)
hdf5_inc_parallel = [
    '/usr/include/hdf5/openmpi',
    os.path.expandvars('$ANAG_HDF5_DIR') + '/include',
    os.path.expandvars('$HDF5_DIR') + '/include',
    os.path.expandvars('$OLCF_HDF5_ROOT') + '/include',
    home + '/hdf5_parallel/include'
]
hdf5_lib_serial = [
    '/usr/lib/x86_64-linux-gnu/hdf5/serial',
    os.path.expandvars('$ANAG_HDF5_DIR') + '/lib',
    os.path.expandvars('$HDF5_DIR') + '/lib',
    home + '/hdf5/lib'
]
hdf5_inc_serial = [
    '/usr/include/hdf5/serial',
    os.path.expandvars('$ANAG_HDF5_DIR') + '/include',
    os.path.expandvars('$HDF5_DIR') + '/include',
    home + '/hdf5/include'
]

parser.add_argument('--prefix', help='build directory location [build]',default='build')
parser.add_argument('--cxx', help='C++ compiler to use ', choices=['g++','clang++','xlC','nvcc','mpicxx','hipcc','CC'], default=default_compiler)
parser.add_argument('--dim', type=int, help='dimensionality to build executables [2]',default='2')
parser.add_argument('--opt', choices=['DEBUG', 'OPT'],help='compiler optimization [DEBUG]',default='DEBUG')
parser.add_argument('--memcheck', help="turns on code in BoxData that checks that copying/aliasing is working correctly",
                    action="store_true",default=False)
parser.add_argument('--memtrack', help="print the amount of data allocated per protoMalloc", choices=['TRUE', 'FALSE'], default='FALSE')
parser.add_argument('--timers', help='whether to turn on timers', choices=['TRUE', 'FALSE'], default='TRUE')
parser.add_argument('--hdf5', help='whether to use HDF5', choices=['TRUE', 'FALSE'], default='TRUE')
parser.add_argument('--mpi', help='force compilation using MPI', choices=['TRUE', 'FALSE'], default='FALSE')
parser.add_argument('--amr', help='compile with AMR libraries', choices=['TRUE', 'FALSE'], default='FALSE')
parser.add_argument('--mmb', help='compile with MMB libraries', choices=['TRUE', 'FALSE'], default='FALSE')
parser.add_argument('--stack', help='define how many GB to allocate to the stack', choices=['1GB', '2GB', '4GB'], default='4GB')
args = parser.parse_args()

print(args)

#if os.path.isdir(args.prefix) != True:
#    os.mkdir(args.prefix)

f = open('Makefile.in','r')
makefile_in = f.read()
f.close()

phorule='.PHONY: doc\n'
allrule='all:\n'
cleanrule='clean:\n'
resetrule='reset:\n'

targets=['AMRAdvection', 'AMRFAS', 'LevelEuler', 'FASMultigrid','LevelMultigrid', 'MMBLevelRelax']

top = os.getcwd()

for t in targets:
    if os.path.isdir('./examples/'+t) == False: print("Missing example directory: /examples/" + t)
    d='examples/'+t+'/exec'
    print(d)
    allrule+='\tcd '+d+'; $(MAKE)\n'
    cleanrule+='\tcd '+d+'; $(MAKE) clean\n'
    resetrule+='\tcd '+d+'; rm GNUmakefile\n'
    os.chdir(d)
    f = open('GNUmakefile','w')
    f.write('VARS_OLD := $(.VARIABLES)\n')
    f.write('DEPXX='+args.cxx+'\n')
    f.write('CXX='+args.cxx+'\n')
    f.write('DIM='+str(args.dim)+'\n')
    f.write('USE_HDF5='+str(args.hdf5)+'\n')
    f.write('PROTO=../../..\n')

    use_mpi = (args.mpi == 'TRUE')
    if args.cxx != 'CC' and args.cxx != 'hipcc':
      f.write('\nLAPACK_LIB=-lblas -llapack');
    if args.opt == 'DEBUG':
      f.write('\nCXXOPTFLAGS=-g')
      if args.cxx == 'nvcc':
        f.write('\nCXXOPTFLAGS+=-G -DTHRUST_DEBUG')
    else:
        f.write('\nCXXOPTFLAGS=-O3 ')
    if args.memcheck:
        f.write('\nCXXOPTFLAGS+=-DPROTO_MEM_CHECK')
    if args.memtrack:
        f.write('\nCXXOPTFLAGS+=-DmemoryFootPrint')
    if args.amr:
        f.write('\nCXXOPTFLAGS+=-DPR_AMR')
    if args.mmb:
        f.write('\nCXXOPTFLAGS+=-DPR_MMB')
    if args.timers != 'TRUE':
      f.write('\nCXXOPTFLAGS+= -DPR_TURN_OFF_TIMERS ')
    if args.cxx == 'nvcc':
        f.write('\nCXXOPTFLAGS+=-x cu --expt-extended-lambda --expt-relaxed-constexpr')
        f.write('\nCXXOPTFLAGS+=-DPROTO_CUDA=1 -arch=compute_70')
    if args.cxx == 'hipcc':
       f.write('\nCXXOPTFLAGS+=-DPROTO_CUDA=1 -DPROTO_HIP -I${MPICH_DIR}/include') 
       f.write('\nLIBS+=-L${MPICH_DIR}/lib -lmpi')
    if os.path.isdir(os.path.expandvars('$ROCM_COMPILER_PATH')):
        f.write('\nCXXOPTFLAGS+=-DPROTO_CUDA=1 -DPROTO_HIP  -D__HIP_ROCclr__ -D__HIP_ARCH_GFX90A__=1 --rocm-path=${ROCM_PATH} --offload-arch=gfx90a -x hip -I${ROCM_PATH}/include -I${ROCM_PATH}/include/roctracer')
    if args.cxx=='mpicxx':
      use_mpi = True
    if args.hdf5=='TRUE':
      f.write('\nCXXOPTFLAGS+= -DPR_HDF5=TRUE')
      if use_mpi:
        for dlib in hdf5_lib_parallel:
          if os.path.isdir(dlib):
            f.write('\nHDF5_LIB=' + dlib)
            break
        for dinc in hdf5_inc_parallel:
          if os.path.isdir(dinc):
            f.write('\nHDF5_INC=' + dinc)
            break
      else:
        for dlib in hdf5_lib_serial:
          if os.path.isdir(dlib):
            f.write('\nHDF5_LIB=' + dlib)
            break
        for dinc in hdf5_inc_serial:
          if os.path.isdir(dinc):
            f.write('\nHDF5_INC=' + dinc)
            break
    if use_mpi:
      f.write('\nCXXOPTFLAGS+= -DPR_MPI=TRUE')
    if args.stack == '1GB':
      f.write('\nCXXOPTFLAGS+= -DPR_STACK_ALLOC=1073741824')
    elif args.stack == '2GB':
      f.write('\nCXXOPTFLAGS+= -DPR_STACK_ALLOC=2147483648')
    elif args.stack == '4GB':
      f.write('\nCXXOPTFLAGS+= -DPR_STACK_ALLOC=4294967296')
    exe=t+'.exe'
    f.write('\nTARGET:='+exe+'\n')
 
    os.chdir(top)
    f.write(makefile_in)
    f.close()

rt = open('Makefile','w')
rt.write(phorule)
rt.write(allrule)
rt.write(cleanrule)
rt.write(resetrule)
rt.write("\ndoc:\n")
rt.write("\t doxygen doxygen.config \n")
rt.write("\t @echo see document in doc/html/index.html")
rt.close()
