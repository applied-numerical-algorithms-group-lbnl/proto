#!/usr/bin/python
from argparse import *
import os
import glob
import platform

parser = ArgumentParser()
default_compiler='g++'
if platform.system()=='Darwin':
  default_compiler='clang++'
if platform.machine()=='ppc64le':
  default_compiler='xlC'


parser.add_argument('--prefix', help='build directory location [build]',default='build')
parser.add_argument('--cxx', help='C++ compiler to use ', choices=['g++','clang++','xlC','nvcc'], default=default_compiler)
parser.add_argument('--dim', type=int, help='dimensionality to build executables [2]',default='2')
parser.add_argument('--opt', choices=['DEBUG', 'OPT'],help='compiler optimization [DEBUG]',default='DEBUG')
parser.add_argument('-memcheck', help="turns on code in BoxData that checks that copying/aliasing is working correctly",
                    action="store_true",default='FALSE')
parser.add_argument('--timers', help='whether to turn on timers', choices=['TRUE', 'FALSE'], default='TRUE')
args = parser.parse_args()

print args

#if os.path.isdir(args.prefix) != True:
#    os.mkdir(args.prefix)

f = open('Makefile.in','r')
makefile_in = f.read()
f.close()

phorule='.PHONY: doc\n'
allrule='all:\n'
cleanrule='clean:\n'

targets=['Euler', 'Godunov', 'Multigrid', 'Navier', 'applyKernel', 'forallKernel', 'laplacian', 'leveldata', 'GeometryConvergence', 'PoissonStencil']

top = os.getcwd()

for t in targets:
    d='examples/'+t+'/exec'
    print d
    allrule+='\tcd '+d+'; make\n'
    cleanrule+='\tcd '+d+'; make clean\n'
    os.chdir(d)
    f = open('GNUmakefile','w')
    f.write('VARS_OLD := $(.VARIABLES)\n')
    f.write('DEPXX='+args.cxx+'\n')
    f.write('CXX='+args.cxx+'\n')
    f.write('DIM='+str(args.dim)+'\n')
    f.write('PROTO=../../..\n')

    if args.opt == 'DEBUG':
      f.write('\nCXXOPTFLAGS=-g ')
      if args.cxx == 'nvcc':
        f.write('\nCXXOPTFLAGS+=-G -DTHRUST_DEBUG')
    else:
        f.write('\nCXXOPTFLAGS=-O3 ')
    if args.memcheck == 'TRUE':
        f.write('\nCXXOPTFLAGS+=-DPROTO_MEM_CHECK')
    if args.timers != 'TRUE':
      f.write('\nCXXOPTFLAGS+= -DPR_TURN_OFF_TIMERS ')
    if args.cxx == 'nvcc':
        f.write('\nCXXOPTFLAGS+=-x cu --expt-extended-lambda')
        f.write('\nCXXOPTFLAGS+=-DPROTO_CUDA=1')

    exe=t+'.exe'
    f.write('\nTARGET:='+exe+'\n')

 
 
    os.chdir(top)
    f.write(makefile_in)
    f.close()

rt = open('Makefile','w')
rt.write(phorule)
rt.write(allrule)
rt.write(cleanrule)
rt.write("\ndoc:\n")
rt.write("\t doxygen doxygen.config \n")
rt.write("\t @echo see document in doc/html/index.html")
rt.close()
